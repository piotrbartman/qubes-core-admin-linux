#!/usr/bin/python3
import os
import sys
from typing import Dict

import pkg_resources

from utils import get_os_data


def main(args=None):
    """
    Run the appropriate package manager.

    :param args: args passed directly to package manager
    """
    os_data = get_os_data()
    requirements = {}
    refresh_args = []
    upgrade_args = []

    if os_data["os_family"] == "Debian":
        try:
            from apt_api import APT
        except ImportError:
            # no progress reporting
            from apt_cli import APTCLI as APT

        if os_data["codename"] == "buster":
            # https://bugs.debian.org/931566
            # Apply the workaround manually, to be able to pull in the fixed
            # apt version
            allow_releaseinfo_change()
        pkg_mng = APT()
    elif os_data["os_family"] == "RedHat":
        try:
            from dnf_api import DNF
        except ImportError:
            # no progress reporting
            from dnf_cli import DNFCLI as DNF

        manage_rpm_macro(os_data, requirements)
        disable_deltarpm()
        pkg_mng = DNF()
    else:
        raise NotImplementedError(
            "Only Debian and RedHat based os is supported.")

    # TODO config here
    return_code = pkg_mng.upgrade(refresh=True,
                                  hard_fail=True,
                                  remove_obsolete=True,
                                  requirements=requirements,
                                  refresh_args=refresh_args,
                                  upgrade_args=upgrade_args)
    # TODO clean config
    # TODO
    with open(pkg_mng.log_path) as f:
        print("".join(f.readlines()))

    return return_code


def allow_releaseinfo_change(apt_conf="/etc/apt/apt.conf"):
    with open(apt_conf, "a+") as f:  # TODO: do not append if present
        f.write('\nAcquire::AllowReleaseInfoChange "false";\n')


def manage_rpm_macro(os_data, requirements: Dict[str, str]):
    rpm_macro = "/usr/lib/rpm/macros.d/macros.qubes"
    if (os_data["id"] == "fedora"
            and os_data["release"] < pkg_resources.parse_version("33")):
        with open(rpm_macro, "w") as f:
            f.write("# CVE-2021-20271 mitigation\n"
                    "%_pkgverify_level all")
    else:
        if os.path.exists(rpm_macro):
            os.remove(rpm_macro)
        requirements.update({"dnf": "4.7.0", "rpm": "4.14.2"})


def disable_deltarpm(dnf_conf="/etc/dnf/dnf.conf"):
    """

    :param dnf_conf:
    :return:
    """
    # TODO dnf makecache
    with open(dnf_conf, "a+") as f:  # TODO: do not append if present
        f.write("\ndeltarpm=False\n")


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))  # TODO argument parser
